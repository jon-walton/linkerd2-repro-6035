---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: authorizationpolicies.policy.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
  labels:
    helm.sh/chart: linkerd-crds-1.1.1-edge
    linkerd.io/control-plane-ns: linkerd
spec:
  group: policy.linkerd.io
  scope: Namespaced
  names:
    kind: AuthorizationPolicy
    plural: authorizationpolicies
    singular: authorizationpolicy
    shortNames: []
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              description: >-
                Authorizes clients to communicate with Linkerd-proxied server
                resources.
              type: object
              required: [targetRef, requiredAuthenticationRefs]
              properties:
                targetRef:
                  description: >-
                    TargetRef references a resource to which the authorization
                    policy applies.
                  type: object
                  required: [kind, name]
                  # Modified from the gateway API.
                  # Copyright 2020 The Kubernetes Authors
                  properties:
                    group:
                      description: >-
                        Group is the group of the referent. When empty, the
                        Kubernetes core API group is inferred.
                      maxLength: 253
                      pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                      type: string
                    kind:
                      description: >-
                        Kind is the kind of the referent.
                      maxLength: 63
                      minLength: 1
                      pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                      type: string
                    name:
                      description: Name is the name of the referent.
                      maxLength: 253
                      minLength: 1
                      type: string
                requiredAuthenticationRefs:
                  description: >-
                    RequiredAuthenticationRefs enumerates a set of required
                    authentications. ALL authentications must be satisfied for
                    the authorization to apply. If any of the referred objects
                    cannot be found, the authorization will be ignored.
                  type: array
                  items:
                    type: object
                    required: [kind, name]
                    properties:
                      group:
                        description: >-
                          Group is the group of the referent. When empty, the
                          Kubernetes core API group is inferred."
                        maxLength: 253
                        pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                        type: string
                      kind:
                        description: >-
                          Kind is the kind of the referent.
                        maxLength: 63
                        minLength: 1
                        pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                        type: string
                      name:
                        description: >-
                          Name is the name of the referent.
                        maxLength: 253
                        minLength: 1
                        type: string
                      namespace:
                        description: >-
                          Name is the name of the referent. When unspecified,
                          this authentication refers to the local namespace.
                        maxLength: 253
                        type: string
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: meshtlsauthentications.policy.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
  labels:
    helm.sh/chart: linkerd-crds-1.1.1-edge
    linkerd.io/control-plane-ns: linkerd
spec:
  group: policy.linkerd.io
  scope: Namespaced
  names:
    kind: MeshTLSAuthentication
    plural: meshtlsauthentications
    singular: meshtlsauthentication
    shortNames: []
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              description: >-
                MeshTLSAuthentication defines a list of authenticated client IDs
                to be referenced by an `AuthorizationPolicy`. If a client
                connection has the mutually-authenticated identity that matches
                ANY of the of the provided identities, the connection is
                considered authenticated.
              type: object
              oneOf:
                - required: [identities]
                - required: [identityRefs]
              properties:
                identities:
                  description: >-
                    Authorizes clients with the provided proxy identity strings
                    (as provided via MTLS)

                    The `*` prefix can be used to match all identities in
                    a domain. An identity string of `*` indicates that
                    all authentication clients are authorized.
                  type: array
                  items:
                    type: string
                    pattern: '^(\*|[a-z0-9]([-a-z0-9]*[a-z0-9])?)(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
                identityRefs:
                  type: array
                  items:
                    type: object
                    required:
                      - kind
                    properties:
                      group:
                        description: >-
                          Group is the group of the referent. When empty, the
                          Kubernetes core API group is inferred."
                        maxLength: 253
                        pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                        type: string
                      kind:
                        description: >-
                          Kind is the kind of the referent.
                        maxLength: 63
                        minLength: 1
                        pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                        type: string
                      name:
                        description: >-
                          Name is the name of the referent. When unspecified,
                          this refers to all resources of the specified Group
                          and Kind in the specified namespace.
                        maxLength: 253
                        minLength: 1
                        type: string
                      namespace:
                        description: >-
                          Name is the name of the referent. When unspecified,
                          this authentication refers to the local namespace.
                        maxLength: 253
                        type: string
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: networkauthentications.policy.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
  labels:
    helm.sh/chart: linkerd-crds-1.1.1-edge
    linkerd.io/control-plane-ns: linkerd
spec:
  group: policy.linkerd.io
  scope: Namespaced
  names:
    kind: NetworkAuthentication
    plural: networkauthentications
    singular: networkauthentication
    shortNames: []
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              description: >-
                NetworkAuthentication defines a list of authenticated client
                networks to be referenced by an `AuthorizationPolicy`. If a
                client connection originates from ANY of the of the provided
                networks, the connection is considered authenticated.
              type: object
              required: [networks]
              properties:
                networks:
                  type: array
                  items:
                    type: object
                    required: [cidr]
                    properties:
                      cidr:
                        description: >-
                          The CIDR of the network to be authorized.
                        type: string
                      except:
                        description: >-
                          A list of IP networks/addresses not to be included in
                          the above `cidr`.
                        type: array
                        items:
                          type: string
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: servers.policy.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
  labels:
    helm.sh/chart: linkerd-crds-1.1.1-edge
    linkerd.io/control-plane-ns: linkerd
spec:
  group: policy.linkerd.io
  names:
    kind: Server
    plural: servers
    singular: server
    shortNames: [srv]
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: false
      deprecated: true
      deprecationWarning: "policy.linkerd.io/v1alpha1 Server is deprecated; use policy.linkerd.io/v1beta1 Server"
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              type: object
              required:
                - podSelector
                - port
              properties:
                podSelector:
                  type: object
                  description: >-
                    Selects pods in the same namespace.
                  oneOf:
                    - required: [matchExpressions]
                    - required: [matchLabels]
                  properties:
                    matchLabels:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    matchExpressions:
                      type: array
                      items:
                        type: object
                        required: [key, operator]
                        properties:
                          key:
                            type: string
                          operator:
                            type: string
                            enum: [In, NotIn, Exists, DoesNotExist]
                          values:
                            type: array
                            items:
                              type: string
                port:
                  description: >-
                    A port name or number. Must exist in a pod spec.
                  x-kubernetes-int-or-string: true
                proxyProtocol:
                  description: >-
                    Configures protocol discovery for inbound connections.

                    Supersedes the `config.linkerd.io/opaque-ports` annotation.
                  type: string
                  default: unknown
                  enum:
                    - unknown
                    - HTTP/1
                    - HTTP/2
                    - gRPC
                    - opaque
                    - TLS
    - name: v1beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              type: object
              required:
                - podSelector
                - port
              properties:
                podSelector:
                  type: object
                  description: >-
                    Selects pods in the same namespace.

                    The result of matchLabels and matchExpressions are ANDed.
                    Selects all if empty.
                  properties:
                    matchLabels:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    matchExpressions:
                      type: array
                      items:
                        type: object
                        required: [key, operator]
                        properties:
                          key:
                            type: string
                          operator:
                            type: string
                            enum: [In, NotIn, Exists, DoesNotExist]
                          values:
                            type: array
                            items:
                              type: string
                port:
                  description: >-
                    A port name or number. Must exist in a pod spec.
                  x-kubernetes-int-or-string: true
                proxyProtocol:
                  description: >-
                    Configures protocol discovery for inbound connections.

                    Supersedes the `config.linkerd.io/opaque-ports` annotation.
                  type: string
                  default: unknown
                  enum:
                    - unknown
                    - HTTP/1
                    - HTTP/2
                    - gRPC
                    - opaque
                    - TLS
      additionalPrinterColumns:
        - name: Port
          type: string
          description: The port the server is listening on
          jsonPath: .spec.port
        - name: Protocol
          type: string
          description: The protocol of the server
          jsonPath: .spec.proxyProtocol
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: serverauthorizations.policy.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
  labels:
    helm.sh/chart: linkerd-crds-1.1.1-edge
    linkerd.io/control-plane-ns: linkerd
spec:
  group: policy.linkerd.io
  scope: Namespaced
  names:
    kind: ServerAuthorization
    plural: serverauthorizations
    singular: serverauthorization
    shortNames: [saz]
  versions:
    - name: v1alpha1
      served: true
      storage: false
      deprecated: true
      deprecationWarning: "policy.linkerd.io/v1alpha1 ServerAuthorization is deprecated; use policy.linkerd.io/v1beta1 ServerAuthorization"
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              description: >-
                Authorizes clients to communicate with Linkerd-proxied servers.
              type: object
              required: [server, client]
              properties:
                server:
                  description: >-
                    Identifies servers in the same namespace for which this
                    authorization applies.

                    Only one of `name` or `selector` may be specified.
                  type: object
                  oneOf:
                    - required: [name]
                    - required: [selector]
                  properties:
                    name:
                      description: References a `Server` instance by name
                      type: string
                      pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                    selector:
                      description: >-
                        A label query over servers on which this authorization applies.
                      type: object
                      properties:
                        matchLabels:
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        matchExpressions:
                          type: array
                          items:
                            type: object
                            required: [key, operator]
                            properties:
                              key:
                                type: string
                              operator:
                                type: string
                                enum: [In, NotIn, Exists, DoesNotExist]
                              values:
                                type: array
                                items:
                                  type: string
                client:
                  description:  Describes clients authorized to access a server.
                  type: object
                  properties:
                    networks:
                      description: >-
                        Limits the client IP addresses to which this
                        authorization applies. If unset, the server chooses a
                        default (typically, all IPs or the cluster's pod
                        network).
                      type: array
                      items:
                        type: object
                        required: [cidr]
                        properties:
                          cidr:
                            type: string
                          except:
                            type: array
                            items:
                              type: string
                    unauthenticated:
                      description: >-
                        Authorizes unauthenticated clients to access a server.
                      type: boolean
                    meshTLS:
                      type: object
                      properties:
                        unauthenticatedTLS:
                          type: boolean
                          description: >-
                            Indicates that no client identity is required for
                            communication.

                            This is mostly important for the identity
                            controller, which must terminate TLS connections
                            from clients that do not yet have a certificate.
                        identities:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            strings (as provided via MTLS)

                            The `*` prefix can be used to match all identities in
                            a domain. An identity string of `*` indicates that
                            all authentication clients are authorized.
                          type: array
                          items:
                            type: string
                            pattern: '^(\*|[a-z0-9]([-a-z0-9]*[a-z0-9])?)(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
                        serviceAccounts:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            service accounts (as provided via MTLS)
                          type: array
                          items:
                            type: object
                            required: [name]
                            properties:
                              name:
                                description: The ServiceAccount's name.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                              namespace:
                                description: >-
                                  The ServiceAccount's namespace. If unset, the
                                  authorization's namespace is used.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
    - name: v1beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              description: >-
                Authorizes clients to communicate with Linkerd-proxied servers.
              type: object
              required: [server, client]
              properties:
                server:
                  description: >-
                    Identifies servers in the same namespace for which this
                    authorization applies.

                    Only one of `name` or `selector` may be specified.
                  type: object
                  oneOf:
                    - required: [name]
                    - required: [selector]
                  properties:
                    name:
                      description: References a `Server` instance by name
                      type: string
                      pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                    selector:
                      description: >-
                        A label query over servers on which this authorization applies.
                      type: object
                      properties:
                        matchLabels:
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        matchExpressions:
                          type: array
                          items:
                            type: object
                            required: [key, operator]
                            properties:
                              key:
                                type: string
                              operator:
                                type: string
                                enum: [In, NotIn, Exists, DoesNotExist]
                              values:
                                type: array
                                items:
                                  type: string
                client:
                  description:  Describes clients authorized to access a server.
                  type: object
                  properties:
                    networks:
                      description: >-
                        Limits the client IP addresses to which this
                        authorization applies. If unset, the server chooses a
                        default (typically, all IPs or the cluster's pod
                        network).
                      type: array
                      items:
                        type: object
                        required: [cidr]
                        properties:
                          cidr:
                            type: string
                          except:
                            type: array
                            items:
                              type: string
                    unauthenticated:
                      description: >-
                        Authorizes unauthenticated clients to access a server.
                      type: boolean
                    meshTLS:
                      type: object
                      properties:
                        unauthenticatedTLS:
                          type: boolean
                          description: >-
                            Indicates that no client identity is required for
                            communication.

                            This is mostly important for the identity
                            controller, which must terminate TLS connections
                            from clients that do not yet have a certificate.
                        identities:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            strings (as provided via MTLS)

                            The `*` prefix can be used to match all identities in
                            a domain. An identity string of `*` indicates that
                            all authentication clients are authorized.
                          type: array
                          items:
                            type: string
                            pattern: '^(\*|[a-z0-9]([-a-z0-9]*[a-z0-9])?)(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
                        serviceAccounts:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            service accounts (as provided via MTLS)
                          type: array
                          items:
                            type: object
                            required: [name]
                            properties:
                              name:
                                description: The ServiceAccount's name.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                              namespace:
                                description: >-
                                  The ServiceAccount's namespace. If unset, the
                                  authorization's namespace is used.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
      additionalPrinterColumns:
        - name: Server
          type: string
          description: The server that this grants access to
          jsonPath: .spec.server.name
---
###
### Service Profile CRD
###
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: serviceprofiles.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
  labels:
    helm.sh/chart: linkerd-crds-1.1.1-edge
    linkerd.io/control-plane-ns: linkerd
spec:
  group: linkerd.io
  versions:
    - name: v1alpha1
      served: true
      storage: false
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              description: Spec is the custom resource spec
              required:
                - routes
              properties:
                dstOverrides:
                  type: array
                  required:
                    - authority
                    - weight
                  items:
                    type: object
                    description: WeightedDst is a weighted alternate destination.
                    properties:
                      authority:
                        type: string
                      weight:
                        x-kubernetes-int-or-string: true
                        anyOf:
                          - type: integer
                          - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                opaquePorts:
                  type: array
                  items:
                    type: string
                retryBudget:
                  type: object
                  required:
                    - minRetriesPerSecond
                    - retryRatio
                    - ttl
                  description: RetryBudget describes the maximum number of retries that should be issued to this service.
                  properties:
                    minRetriesPerSecond:
                      format: int32
                      type: integer
                    retryRatio:
                      type: number
                      format: float
                    ttl:
                      type: string
                routes:
                  type: array
                  items:
                    type: object
                    description: RouteSpec specifies a Route resource.
                    required:
                      - condition
                      - name
                    properties:
                      condition:
                        type: object
                        description: RequestMatch describes the conditions under which to match a Route.
                        properties:
                          pathRegex:
                            type: string
                          method:
                            type: string
                          all:
                            type: array
                            items:
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          any:
                            type: array
                            items:
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          not:
                            type: array
                            items:
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                      isRetryable:
                        type: boolean
                      name:
                        type: string
                      timeout:
                        type: string
                      responseClasses:
                        type: array
                        items:
                          type: object
                          required:
                            - condition
                          description: ResponseClass describes how to classify a response (e.g. success or failures).
                          properties:
                            condition:
                              type: object
                              description: ResponseMatch describes the conditions under
                                which to classify a response.
                              properties:
                                all:
                                  type: array
                                  items:
                                    type: object
                                    x-kubernetes-preserve-unknown-fields: true
                                any:
                                  type: array
                                  items:
                                    type: object
                                    x-kubernetes-preserve-unknown-fields: true
                                not:
                                  type: array
                                  items:
                                    type: object
                                    x-kubernetes-preserve-unknown-fields: true
                                status:
                                  type: object
                                  description: Range describes a range of integers (e.g. status codes).
                                  properties:
                                    max:
                                      format: int32
                                      type: integer
                                    min:
                                      format: int32
                                      type: integer
                            isFailure:
                              type: boolean
    - name: v1alpha2
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              description: Spec is the custom resource spec
              properties:
                dstOverrides:
                  type: array
                  required:
                    - authority
                    - weight
                  items:
                    type: object
                    description: WeightedDst is a weighted alternate destination.
                    properties:
                      authority:
                        type: string
                      weight:
                        x-kubernetes-int-or-string: true
                        anyOf:
                          - type: integer
                          - type: string
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                opaquePorts:
                  type: array
                  items:
                    type: string
                retryBudget:
                  type: object
                  required:
                    - minRetriesPerSecond
                    - retryRatio
                    - ttl
                  description: RetryBudget describes the maximum number of retries that should be issued to this service.
                  properties:
                    minRetriesPerSecond:
                      format: int32
                      type: integer
                    retryRatio:
                      type: number
                      format: float
                    ttl:
                      type: string
                routes:
                  type: array
                  items:
                    type: object
                    description: RouteSpec specifies a Route resource.
                    required:
                      - condition
                      - name
                    properties:
                      condition:
                        type: object
                        description: RequestMatch describes the conditions under which to match a Route.
                        properties:
                          pathRegex:
                            type: string
                          method:
                            type: string
                          all:
                            type: array
                            items:
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          any:
                            type: array
                            items:
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                          not:
                            type: array
                            items:
                              type: object
                              x-kubernetes-preserve-unknown-fields: true
                      isRetryable:
                        type: boolean
                      name:
                        type: string
                      timeout:
                        type: string
                      responseClasses:
                        type: array
                        items:
                          type: object
                          required:
                            - condition
                          description: ResponseClass describes how to classify a response (e.g. success or failures).
                          properties:
                            condition:
                              type: object
                              description: ResponseMatch describes the conditions under
                                which to classify a response.
                              properties:
                                all:
                                  type: array
                                  items:
                                    type: object
                                    x-kubernetes-preserve-unknown-fields: true
                                any:
                                  type: array
                                  items:
                                    type: object
                                    x-kubernetes-preserve-unknown-fields: true
                                not:
                                  type: array
                                  items:
                                    type: object
                                    x-kubernetes-preserve-unknown-fields: true
                                status:
                                  type: object
                                  description: Range describes a range of integers (e.g. status codes).
                                  properties:
                                    max:
                                      format: int32
                                      type: integer
                                    min:
                                      format: int32
                                      type: integer
                            isFailure:
                              type: boolean
  scope: Namespaced
  preserveUnknownFields: false
  names:
    plural: serviceprofiles
    singular: serviceprofile
    kind: ServiceProfile
    shortNames:
      - sp
---
###
### Linkerd Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd
  annotations:
    linkerd.io/inject: disabled
  labels:
    linkerd.io/is-control-plane: "true"
    config.linkerd.io/admission-webhooks: disabled
    linkerd.io/control-plane-ns: linkerd
---
###
### Identity Controller Service RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-identity
subjects:
- kind: ServiceAccount
  name: linkerd-identity
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
---
###
### Destination Controller Service
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "nodes", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["discovery.k8s.io"]
  resources: ["endpointslices"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-destination
subjects:
- kind: ServiceAccount
  name: linkerd-destination
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-destination
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-sp-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURURENDQWpTZ0F3SUJBZ0lRQ2dHMnhsckxRai9vRDc4TXRaQmVEVEFOQmdrcWhraUc5dzBCQVFzRkFEQXIKTVNrd0p3WURWUVFERXlCc2FXNXJaWEprTFhOd0xYWmhiR2xrWVhSdmNpNXNhVzVyWlhKa0xuTjJZekFlRncweQpNakEzTURRd09ESXlOVGhhRncweU16QTNNRFF3T0RJeU5UaGFNQ3N4S1RBbkJnTlZCQU1USUd4cGJtdGxjbVF0CmMzQXRkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBNC9Fby9sUmVlZnJOUUN1UllEd0daTDhRcXNOTUQzQ0Z0eWlsd0UwYWs2R2NPQjNsR1ZKVQo1cFNFUys0L3hTVHVOczMvRWZEdWJYM2hjSTg1a05KMFNUQ0ttQzJXTFZrRHdiVnFzWXNYeDdrQ05mb2ZERW5yCm5aOEwyRzNJUVZCNHQzV1JweDlLMm9HOE5TU005Skw5dGpROEFOWkF1d1gvOWFqV210K1IwYmg0YlhsUDlQbWMKTVhWU0owcEFBNjNjVlI3czRNaEVqNnBVaVlwMHNVVTFZQ2RHYXNTc2lJcVlXZi96dkR0Yko0VndweHlJeGtVMwpLU3VIOXViQWgvUzcrc2lVcTFiSUJFTktEdk1ITFB1S0RmcnJmMVR6bU05Z0gvZzduUDFxSkhDN2FNZGdnY3p0CmRpY25Rc2g3dmIxb1RTL3RZT2J0N3Bmd0p6ZEY1UkpuUXdJREFRQUJvMnd3YWpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpLd1lEVlIwUkJDUXdJb0lnYkdsdWEyVnlaQzF6Y0MxMllXeHBaR0YwYjNJdWJHbHVhMlZ5WkM1emRtTXdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUlMOXJob3dtZnEzbUMyRkZKdEM1NWJveDQwTEo3bWVjTElRVnpic2lFMWsKTWZGdjdGbDdESmV2NmNSTWIwcG9hcHVXME1kT1ZPZUdYeTFBOUdUUld1MmVhZzhFWWVQU1VoSEVIeWZFdTUvZApLbFlZRlBqVzVORTVOak84czBPcFdzWTVqZjBEYjZTeUprWWxMS1A5ZjI1bExCc3NoalZxbkJPL3NZQndvWmtUCjRpb2Y3KzlCS2VIODNkRWRNeVUydGZzMjl4RHpDeXNJdnQxdHdUTTU0aGdmSjVyR1lwUzQwY1FId3hHcVRuQzgKbnRaeHQ5RSsyeXQ4eTgrUXREZFF6WW1RSjJzYm1Wazd0eGluRC9MWkRIMXNLMjJsakM2aU9hT09KT1RJUVBzNQo4TVZkRkxjanVURktuSCtsb1kwNTZkRjg1NXlqM1ZYVkZ3Q1JhQklFNXpBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNC9Fby9sUmVlZnJOUUN1UllEd0daTDhRcXNOTUQzQ0Z0eWlsd0UwYWs2R2NPQjNsCkdWSlU1cFNFUys0L3hTVHVOczMvRWZEdWJYM2hjSTg1a05KMFNUQ0ttQzJXTFZrRHdiVnFzWXNYeDdrQ05mb2YKREVucm5aOEwyRzNJUVZCNHQzV1JweDlLMm9HOE5TU005Skw5dGpROEFOWkF1d1gvOWFqV210K1IwYmg0YlhsUAo5UG1jTVhWU0owcEFBNjNjVlI3czRNaEVqNnBVaVlwMHNVVTFZQ2RHYXNTc2lJcVlXZi96dkR0Yko0VndweHlJCnhrVTNLU3VIOXViQWgvUzcrc2lVcTFiSUJFTktEdk1ITFB1S0RmcnJmMVR6bU05Z0gvZzduUDFxSkhDN2FNZGcKZ2N6dGRpY25Rc2g3dmIxb1RTL3RZT2J0N3Bmd0p6ZEY1UkpuUXdJREFRQUJBb0lCQVFDZnRucGl1ZnI0dlNMVApzN05KR3NYZ0VZQThKbHRFOWpLN0EyQWdQZVpCU3h1S3RtZXdObUFHc0VtQ2FvMkVOVHcwYW1JdTBBSS85ZFBnCmFucUxYdXJiM1ljKzJiSkFVLzZ0MjgvR1Z3OXlnYzlxd3JhK2hZenlCRjdvWndQSnYvalZreXRiVGpIRXFPS1cKMmVWcCtSU01kazBVeVFyU0FJSTRQdlVmejBiOUNsRkM0VXBveDRCb3c1aHlncnVWaUZOQnE1ZDRraERDa2dJWQpqWS9sWnpUUFdKbGIwKzZ0MUU4cGpyVjFOdmlZOVFKN3ZqdWtoTHgwYVIvRXFTdFJTUE5SbWpBcElJMTRaMUxQClh3eEdDV1FaTEsyeWhYbzI5R29OVVZac2FxVHNScVJqdDliUWowOXcyNElDZ0tEZWlaRk5wRkJjMnlVcWR3UUEKMWppYzl2OEJBb0dCQU9RUFhZUlBvRjMvQWljZlNab0I0bGRSODllcnFwVHNFZTJxeE44azd1WFZqSDRFU3JBZgpGbmMwS0RVYnhtUmFnWlEvZ001VXI3OHpncHg5bTlaZGFnbDRHMDNDMlZsRWlGemhScWlWd2ZKOE5VM3Rnb3NvCjVyNGNyTDdDZHF0TWRLeTU5Rm5lTG1QUjFCRVk2YUtSbnBTbG0rbEMrYysvMTIwUTlSTGZVZmJ2QW9HQkFQL2UKR0NkSk1oOXNETUxuQnFLcEhCc3F4MldrTkVwZmJxR0JCcWJzNWs4OHY2bWFJem55K3pGazFDNmphNXhEd0hQRgpRMHFTdzMxWmgvdHo1QkdmZFJYb2QyUWxsa2hCSVhFK2hZRFFqRS9XNVlLaTExVURBVDcrSmFXS2E0aE9CT0poCjlNWUROTCtFVkpaRGk0U2Q0VEVCWHErNmZxM0MxODBxem5TK2UvVHRBb0dBYi9VdkZwNDBmeENLVVFSbUVJbnUKUUtuRnlGSEkrelR0RkR6cVN4V0poaUVReUdoNDlmODgreVlLdXcrNGxGbHVGWVliU0srQVc2QUE5YXdnVGRzcwpEQnYvWTJ4TllTcG91eGdJcFFobjN3K2s1MjI2MFhBeDNwQ2JLVWEwRlNJQ2dTMEV6UDFxenF3YXJJNExYRGlhCm5pU3k1bzl2cmRKakFuTDVyTnNmRk5jQ2dZRUFsMVJiQXJsRzNORENCM0F1TzN3N2RGSHIxdEMwWUp4cXlUaVAKbjZDVFlwL3lWN1FqUzMzTFZWNW1KQ05oWE8yeFlJZDJFaUFWWVFqWDVUK1l6MWQ1SDNqN1RBN3pBRThOSVhZeAo3WXJxd2JtK3luSFhXNTlJV0dKbUQ2OTdoQVZvM0IvRmJtdXRBZXlaUHJvNlJUZy9YUVdMWS9Hd1JNTHRjWm4wCnU1V0JxTTBDZ1lFQTNWSk8zM1RNTGZHRTBuQzcrNWFraGx0R3NieTdmRDJyUW10a3FzcllSUWJMMk5QdHlRaTcKbDVSQmNvQ0ZkaVJqb2NWUU9jUXVBRXNIQTRvYkgzOGF2Qmx5cGREMm1zTENzaGVBMTVLQnZaL3c3Mnp5MXh6ZQpVbXhMZU9vQ0VuZ1NLaTVvM09lc29RZCtwQ0tWaEdJY211TEkvRDc1dFFUVWdnekNvaDhpODNrPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-sp-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-sp-validator.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-sp-validator
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURURENDQWpTZ0F3SUJBZ0lRQ2dHMnhsckxRai9vRDc4TXRaQmVEVEFOQmdrcWhraUc5dzBCQVFzRkFEQXIKTVNrd0p3WURWUVFERXlCc2FXNXJaWEprTFhOd0xYWmhiR2xrWVhSdmNpNXNhVzVyWlhKa0xuTjJZekFlRncweQpNakEzTURRd09ESXlOVGhhRncweU16QTNNRFF3T0RJeU5UaGFNQ3N4S1RBbkJnTlZCQU1USUd4cGJtdGxjbVF0CmMzQXRkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBNC9Fby9sUmVlZnJOUUN1UllEd0daTDhRcXNOTUQzQ0Z0eWlsd0UwYWs2R2NPQjNsR1ZKVQo1cFNFUys0L3hTVHVOczMvRWZEdWJYM2hjSTg1a05KMFNUQ0ttQzJXTFZrRHdiVnFzWXNYeDdrQ05mb2ZERW5yCm5aOEwyRzNJUVZCNHQzV1JweDlLMm9HOE5TU005Skw5dGpROEFOWkF1d1gvOWFqV210K1IwYmg0YlhsUDlQbWMKTVhWU0owcEFBNjNjVlI3czRNaEVqNnBVaVlwMHNVVTFZQ2RHYXNTc2lJcVlXZi96dkR0Yko0VndweHlJeGtVMwpLU3VIOXViQWgvUzcrc2lVcTFiSUJFTktEdk1ITFB1S0RmcnJmMVR6bU05Z0gvZzduUDFxSkhDN2FNZGdnY3p0CmRpY25Rc2g3dmIxb1RTL3RZT2J0N3Bmd0p6ZEY1UkpuUXdJREFRQUJvMnd3YWpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpLd1lEVlIwUkJDUXdJb0lnYkdsdWEyVnlaQzF6Y0MxMllXeHBaR0YwYjNJdWJHbHVhMlZ5WkM1emRtTXdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUlMOXJob3dtZnEzbUMyRkZKdEM1NWJveDQwTEo3bWVjTElRVnpic2lFMWsKTWZGdjdGbDdESmV2NmNSTWIwcG9hcHVXME1kT1ZPZUdYeTFBOUdUUld1MmVhZzhFWWVQU1VoSEVIeWZFdTUvZApLbFlZRlBqVzVORTVOak84czBPcFdzWTVqZjBEYjZTeUprWWxMS1A5ZjI1bExCc3NoalZxbkJPL3NZQndvWmtUCjRpb2Y3KzlCS2VIODNkRWRNeVUydGZzMjl4RHpDeXNJdnQxdHdUTTU0aGdmSjVyR1lwUzQwY1FId3hHcVRuQzgKbnRaeHQ5RSsyeXQ4eTgrUXREZFF6WW1RSjJzYm1Wazd0eGluRC9MWkRIMXNLMjJsakM2aU9hT09KT1RJUVBzNQo4TVZkRkxjanVURktuSCtsb1kwNTZkRjg1NXlqM1ZYVkZ3Q1JhQklFNXpBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["linkerd.io"]
    apiVersions: ["v1alpha1", "v1alpha2"]
    resources: ["serviceprofiles"]
  sideEffects: None
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-policy-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRQ1JvM01oYjVQQ3IvYXJ1YjdiVU9zekFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJd056QTBNRGd5TWpVNFdoY05Nak13TnpBME1EZ3lNalU0V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUREbEU0YkoxQ1N2T0FzbXZHcFprc3NzaVZOYzl3ajBwY3NLazlGSm45OQp2VXBDbjNHOGUvZmZ0L0lZQUpPRkNzb0k0OW5IZ2dJWWNDVGlzUWJCazRnbTUzN0w4dXBMMGlBbjBlSjFLTG9SClluQkFvN2FVZDdNK21MeXdOaW1yOHlYdU5LRnZOTkNTUkREbDZBOXRGZlM1bUR0akFTVG5EWHVBY25LbkxEaksKTEhUaTZKVEN3OVFzb0RveVZoZzV0KzUwcTVQb0ZMMXVYSHJxWGlSZy9iWWlDclY1a2JocCtqWkJuYStJOXY0VQpmMVAyMnJqZ3R4Tk12SGtrVkFqTEpQNlZEbnRGc0pxMWlEUzRQYWI4Z0JIQ1ZXc000cFQrZmxvWGtGKzhUcVVGCnU0QkFDVFdpSit4MlFVczJtbURIOUJlZmFhSDJOQlN1MGRydmhSb2lvL2gxQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCRTBsVy9FbS80SUhEQm5NcDQ3NmJyZEhoSTEKRFJwbzVySGIrbEpyYXp2R2VqMEhYVzRibFJwRzlKVGRXbGZGYTBudnNMNUkwdkQ1Zm5pYitlVml5d0dxdjF5VApDRmRxTmtuZkpBdUhFMUFSejBFWkV0anZ5VUFjQmxMTUUyU1VvR3JYNkl2VzYvZVk1Q3RTQmpEc0c2NnU5SUNpCm9WbDdSYTFzdnF0QSt2Rm5TdVk5KytLcUZmb0ovMlFMcFV0R3F2NHFTT2Y0TDhocm9WSzVTVS9aM1J1ZnVNUHIKaXQ0ZHNHa2JuMzlHZ0RJZUJhcklyZk83STEvdWVacXV3SHdLMlB3dkcreGlkY052eGV3bTJmYWgvaTViYWdmdgpGUUlhWTdKZFI0NDgydmRLdmtGY2Q4QVJ6djdyc0d5STdEZWVuYWNKRElVQUR1L0RqUG1yTFdXTXNnbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdzVST0d5ZFFrcnpnTEpyeHFXWkxMTElsVFhQY0k5S1hMQ3BQUlNaL2ZiMUtRcDl4CnZIdjMzN2Z5R0FDVGhRcktDT1BaeDRJQ0dIQWs0ckVHd1pPSUp1ZCt5L0xxUzlJZ0o5SGlkU2k2RVdKd1FLTzIKbEhlelBwaThzRFlwcS9NbDdqU2hielRRa2tRdzVlZ1BiUlgwdVpnN1l3RWs1dzE3Z0hKeXB5dzR5aXgwNHVpVQp3c1BVTEtBNk1sWVlPYmZ1ZEt1VDZCUzlibHg2Nmw0a1lQMjJJZ3ExZVpHNGFmbzJRWjJ2aVBiK0ZIOVQ5dHE0CjRMY1RUTHg1SkZRSXl5VCtsUTU3UmJDYXRZZzB1RDJtL0lBUndsVnJET0tVL241YUY1QmZ2RTZsQmJ1QVFBazEKb2lmc2RrRkxOcHBneC9RWG4ybWg5alFVcnRIYTc0VWFJcVA0ZFFJREFRQUJBb0lCQVFDeTFhdE4zUGNxRmhjTgo4bWhETTh4TmhGL2pvS3VNL2dWSlZ5N0ExbUVCZ3RLaWROVTFPazMvZlYyYllQdURUY2hMdEx6d1Z3cS9lZHZnCmhXcmVHcDhHbytzblptbWpCdkpzTnRqUnRIbmZaNW1wSVluVDNGaEVScmxTajFRdmJOZ2tKbS92RmVZWnVNelYKalFwOS92T1Z1WU9rRmVtK2RHK1hsZzhNbWIwYjcwMTgyZHhucmNJMXo5ZjhycnhIbWxWNW10SWpKYkgvU2pvRwpTNTdaTVpjZHFHdmhIVkxXbWFqUy9KblVVNGJUTHczQk9UVHk4SkszOTdCWDB2T1BkTHdNQW91S3NDc2VZS3J1Ckl0NnBuNldSLzR6NGNpZERQQUVhMGJNMDJyU09DWWFpdmIyS29GREdqZU5leFhoODQ3K2U5ajhQMHVZNExGUm0KWEozZHc0MUpBb0dCQU9Kdmk2Uzd6bWtLSXdVeUcxYXQwUkFOckVMUmZ5WHZOSVdVVzBaajZrWEhRbWVWeGovVwpML2NGMzMwemdVM2NITjZNV2syYkRYdCttTVFmSUlVSEJtT28wYk80WWVOVTFrRXRFb1pJUmNiRVF5c0I4MEV0CmlGS3AySGprRFFVV1gvbHBaM2Rtb3V2bnFwQ1BiNmxrMGtOc0NlNkFMUzA3cnRHNjVaRWtrNHJmQW9HQkFOMGQKWit0dXUxaWx5b05KUURxQ1dOK2lCcEpVVUlTcm0rQS9XcmdJZ1hsYzhpNER2bVlxWkFXbEdaSGdQOFdJdjY5MApEdUQ0eTVsYm44NDFzTkplTXM0VWo5eXMreGtvOUxEQzVIZHVST2hxTUc1NFdmYjJ6aE9RMzNvU0EyYjZkdGF1CkF6eHFWUDhwSG5MbUZKQzFKTXpNZEhabi80TnluUU9zdW9RRXJmc3JBb0dBUUNvUnJSV1c4UWJ4VTRpV1hLS1cKaW5FRmJrM0ZOTytxdDJ1SnpkR0VVaytianBUUGY4bG5BQjNHN2NpSmpKR2lFS0krK0p6R1hrZEtiTkRSTzBENQpXNFk4SGl4U2VNUFNqdGVCMTFGbGpHU1RELzNXZTVLMmZZNHBqR0E3SEVUeDMxQXlCSkN0L0NGQ29RSTBSeEVOCjBCTXVZVW9yQXhWVmZaTHplSVNmMW9zQ2dZQjBzanhTU05LZmFvQ0M0WG9BWnlLNGhDNnJzOHY2K1FiL1J2QisKQ0I4dENoeldwQ3NzaUZyWmo5VDY1RHRENlhRaENVT0JBRTJUMW9OMHRXbG8zVVk2OVNjbjlETmhoL2Y4QWgvSgoyR3lOck4xNnNCSHJBVDZwbk9BVThNVFM2SVVuc0JjTkg2RlVPVU5VcUpGWi9nQTZCZjNCTUFudU9lTWNPV0VHCm8rR2VtUUtCZ1FESk00TWlORDBBUWE3VzJHa0tEblVVNWhQZTd0UkVaQk9uTlFpbUFTNm1uVjlwVllha1NhWTAKRkxoaWQ4aGpvSS9Tbjd2ZVVDVnVTWHVXS2JTb3lFOThKUkNlK1NlRDl0bDFSQjZMZUc1V0RzSitHM0lpMDlXRAo5QnRmOEZlWHVMKzlLaGZXd1d2amFKRExqSVZuMmNTVlZOZTdoWHlRV1hhOWliaGlwazJlMkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-policy-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-policy-validator.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-policy-validator
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRQ1JvM01oYjVQQ3IvYXJ1YjdiVU9zekFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJd056QTBNRGd5TWpVNFdoY05Nak13TnpBME1EZ3lNalU0V2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUREbEU0YkoxQ1N2T0FzbXZHcFprc3NzaVZOYzl3ajBwY3NLazlGSm45OQp2VXBDbjNHOGUvZmZ0L0lZQUpPRkNzb0k0OW5IZ2dJWWNDVGlzUWJCazRnbTUzN0w4dXBMMGlBbjBlSjFLTG9SClluQkFvN2FVZDdNK21MeXdOaW1yOHlYdU5LRnZOTkNTUkREbDZBOXRGZlM1bUR0akFTVG5EWHVBY25LbkxEaksKTEhUaTZKVEN3OVFzb0RveVZoZzV0KzUwcTVQb0ZMMXVYSHJxWGlSZy9iWWlDclY1a2JocCtqWkJuYStJOXY0VQpmMVAyMnJqZ3R4Tk12SGtrVkFqTEpQNlZEbnRGc0pxMWlEUzRQYWI4Z0JIQ1ZXc000cFQrZmxvWGtGKzhUcVVGCnU0QkFDVFdpSit4MlFVczJtbURIOUJlZmFhSDJOQlN1MGRydmhSb2lvL2gxQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFCRTBsVy9FbS80SUhEQm5NcDQ3NmJyZEhoSTEKRFJwbzVySGIrbEpyYXp2R2VqMEhYVzRibFJwRzlKVGRXbGZGYTBudnNMNUkwdkQ1Zm5pYitlVml5d0dxdjF5VApDRmRxTmtuZkpBdUhFMUFSejBFWkV0anZ5VUFjQmxMTUUyU1VvR3JYNkl2VzYvZVk1Q3RTQmpEc0c2NnU5SUNpCm9WbDdSYTFzdnF0QSt2Rm5TdVk5KytLcUZmb0ovMlFMcFV0R3F2NHFTT2Y0TDhocm9WSzVTVS9aM1J1ZnVNUHIKaXQ0ZHNHa2JuMzlHZ0RJZUJhcklyZk83STEvdWVacXV3SHdLMlB3dkcreGlkY052eGV3bTJmYWgvaTViYWdmdgpGUUlhWTdKZFI0NDgydmRLdmtGY2Q4QVJ6djdyc0d5STdEZWVuYWNKRElVQUR1L0RqUG1yTFdXTXNnbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["policy.linkerd.io"]
    apiVersions: ["v1alpha1", "v1beta1"]
    resources:
    - authorizationpolicies
    - networkauthentications
    - meshtlsauthentications
    - serverauthorizations
    - servers
  sideEffects: None
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - policy.linkerd.io
    resources:
      - authorizationpolicies
      - meshtlsauthentications
      - networkauthentications
      - servers
      - serverauthorizations
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-destination-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-policy
subjects:
  - kind: ServiceAccount
    name: linkerd-destination
    namespace: linkerd

---
###
### Proxy Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["namespaces", "replicationcontrollers"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
subjects:
- kind: ServiceAccount
  name: linkerd-proxy-injector
  namespace: linkerd
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-proxy-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-proxy-injector-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQVArcy9oMHlrMHJhWFcwdThhMUZIMjR3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBM01EUXdPREl5TlRoYUZ3MHlNekEzTURRd09ESXlOVGhhTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRQzRxcjNtc1ZBWHRhdFlxSTRWNVZCb1ZNQU1KR05GK2NXSHJkUXVHRFloVjVJbApNTnZTNWU0MWhQQjRGMHk1dUpzdGtmUWp2VjJSRDZNdUFFMHZubEpmMnhZU3NIeXRJUElObVo0bnNIWjJKREJBCmRsUzg2REYwZFNQWEsyNVRBMndOazR3ak0wZFJWWUFGRHU1dVE0T0FITUZYSFhsQ1l1RDliWkpyS0NlbUlMM3kKSGFyWXkzN1VtdURLMDlUdGNVNytFaHdRb3c1S3R6M05yUlM2QmJSZm1HOGFxOHgzNXgyZjNobkNKNDVvWVh5egpZbnVtRTVwUm1rMWdwQzRhQjJhQkI0U0NoOW5sSGlTakNNNlhiYzhLaFBHRndhZkM5cURzVFRZMEZWa1VrNmtuCk5CdjVOcGRBNisrWW80eDV2QVhsU3pyVUZWZk5OK2hocEtIclEwanpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNXZmpCWG9aZkFHN1d5NThlQ3pTcGNVS2NMK2d3UVFZTDQKa2ZVbXFZekpSaTFtYjkwVVM0amJvSGJyOEphbmRMQjRRRVRkRzhzd3UrNGNka1UwV1A2RzIyNmVGdlNpbWJ6Zgpwd3A3Ni9pUCtYOU5ydWhTb2ZRUzNOcUxBWXBia3hsYzRDSkdFUk5FV3d1cXMrY2Fjb2F4b2FEd25UOGpuNlVICmdqVDVKMGV2M0QrR1ZMZW95aTUzRForUGNEbDFZUVJtTzdTdkxPOHJueUoydmFoTE9tZTJnc0tZVGFGRzdQMWcKUXdYMDY5TlpBOUZEekNiakpFZ2VFWlBiemFXZEFsL1ZvK0dpenY4NGVOQ2ZqSzk3WU41Q1lXQjlmeENsVFJXLwpDcEJVQVVXUDB1cW1pOElVMU5teTR6TE5kVWgxUzRMS29KUmhMT3V2LzFpVS9ERmdpSmtqCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdUtxOTVyRlFGN1dyV0tpT0ZlVlFhRlRBRENSalJmbkZoNjNVTGhnMklWZVNKVERiCjB1WHVOWVR3ZUJkTXViaWJMWkgwSTcxZGtRK2pMZ0JOTDU1U1g5c1dFckI4clNEeURabWVKN0IyZGlRd1FIWlUKdk9neGRIVWoxeXR1VXdOc0RaT01Jek5IVVZXQUJRN3Via09EZ0J6QlZ4MTVRbUxnL1cyU2F5Z25waUM5OGgycQoyTXQrMUpyZ3l0UFU3WEZPL2hJY0VLTU9TcmM5emEwVXVnVzBYNWh2R3F2TWQrY2RuOTRad2llT2FHRjhzMko3CnBoT2FVWnBOWUtRdUdnZG1nUWVFZ29mWjVSNGtvd2pPbDIzUENvVHhoY0dud3ZhZzdFMDJOQlZaRkpPcEp6UWIKK1RhWFFPdnZtS09NZWJ3RjVVczYxQlZYelRmb1lhU2g2ME5JOHdJREFRQUJBb0lCQUg4dEoyZE95Y2ZxVnp6UgpxRGl3R25ZZmw3dEUvQkZlK0loK1VGZ0dXSkVSekJaTTFiY2luckRCQXhMUmlRZUdlV2dpMGk0aTVlTlhENXhJCm5OK2tlenFFbVdqNW5vTms0dzQyczFMR0ZtODZjUGlVQmJ1cmRST3M4S2Zvd3l2c2VXZklLNFM2ZGUwdm91RFkKN1orR1kzUEJXZTF5NE9XMVR4bDVjcExWcnFpYlRCb01GMVJUUFYxV1NBbGxBNzBoQnh4WFBHaUMvOVJTNk5EYwpJY1pwUnBGaUN5MnkzdTJ2R3dHd1Fwa0JtcWpyZSswWEwveVBTQjVzZUlIVi96Q1NBTDVMbW1SbnMyQmErd0xECkIyd3lWb0RJbW1zR0xBd2RacWdwOTVqSjRaQ2FON0pPbDRpR09MRmJBZEVKRWdBcEFPSWdEVWdIR1VudXo0KzcKRWFJcGY5RUNnWUVBNUpWYTZZSmY2WHBXYWcwNWlLeDZGRCtscW9VNXM4N2NENzVvQVFVREtDZXE3V21XQU9Bbwo4eEErWWlodWhvbHRyTlJrY1B0eEMrTG1TQVJpSVlaVU1oNnVhMFhQSndPcmk4NDBldWpmM3I3OHBrNlJCVDJFCmxldmp4ZTlmS0RaeGRHRUttM1hHanRWU055NFdwNENnbWFRb0hPb3c4U2tnRm5sN09Jb0RsbGNDZ1lFQXp0RHUKL1MrbmtuMmJJckhkK0VBcTFQcjh2Q1RtTVRUenRlVGNUOEpWUy9DTVFGY21UditidU5KVXJNNGVtMWNFTmVzYwozbGpUZzJLU3VKVWNlN3ZMVmxMZmMvZG92SFJsVVJmbi93OWRrRm85UWY2NlFSQTRRSlR2YjJuUFBJYlBDcWFjCjRmbUhzSWVIOWRybGMzMzVRcHF1YjVRaElSWElNd1VRRE5FMUtNVUNnWUVBbDd4TlRSU3VkbDR2WHRiSWltRnoKNkYwWHE4b2tNNmZ0ak1Yb1pFVGZnNWhSYnFmWVcxeHgwbWZHQVlLMVc3bCtoR3U1QVFib1UrdWEwZE9YRUlvSworZnBEN2hHNUlUemVjeisrdHBnL2c2MWtLVUdlSXN4alp1SGZvVlQwNWN5K0kzTUhoNHIyODNuSHlibGVjSEtDCktYcys1WExRYWtYU2R4ak5Jd3I2dHFFQ2dZQW54TEZQNml2MDFVWlJnNVpGT0VHRU5zY0dmcW5zNkZ1OHJFZFkKNXV0ejhNdG5TOXJIOGdyRm5Wdys1bHVvVHpFMkZRRzJGNnFFWng0RGRGakh5akt0Wkw0bkZIb0ZVdlJ3aFlKTQozMjJFWm5YRkRQQlB0b2k2a21rQUtYNTZDd29nNkN6ZW54YmljUTFKejAreng1TjRwVG5KcHRnLy9tcEN0VVNDCjBtL0FhUUtCZ0dxdFMvMkQzYjVEcFJLWjYwTG8xVTVHK2p2L3hlV1dPd1J3c1J5NGRZZEVJOWlTYUxSbjUzMUQKdjRVZ29mQXMxNTNvTmJFeGFTL1Y2T3FyT3VqREk4cnJhVmVLNkZCeGdWbzk2bzM4NnpVdlozTUV2MlFqei9JSApEQ0ZJV1BNd2xlQ1RkNnk2a1BkaHlGc24rQzMxU2x4b1R3YWFBZitGWmIrSXViVWdFdnVRCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-proxy-injector-webhook-config
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-proxy-injector.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
      - kube-system
      - cert-manager
  objectSelector:
    null
  clientConfig:
    service:
      name: linkerd-proxy-injector
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQVArcy9oMHlrMHJhWFcwdThhMUZIMjR3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBM01EUXdPREl5TlRoYUZ3MHlNekEzTURRd09ESXlOVGhhTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRQzRxcjNtc1ZBWHRhdFlxSTRWNVZCb1ZNQU1KR05GK2NXSHJkUXVHRFloVjVJbApNTnZTNWU0MWhQQjRGMHk1dUpzdGtmUWp2VjJSRDZNdUFFMHZubEpmMnhZU3NIeXRJUElObVo0bnNIWjJKREJBCmRsUzg2REYwZFNQWEsyNVRBMndOazR3ak0wZFJWWUFGRHU1dVE0T0FITUZYSFhsQ1l1RDliWkpyS0NlbUlMM3kKSGFyWXkzN1VtdURLMDlUdGNVNytFaHdRb3c1S3R6M05yUlM2QmJSZm1HOGFxOHgzNXgyZjNobkNKNDVvWVh5egpZbnVtRTVwUm1rMWdwQzRhQjJhQkI0U0NoOW5sSGlTakNNNlhiYzhLaFBHRndhZkM5cURzVFRZMEZWa1VrNmtuCk5CdjVOcGRBNisrWW80eDV2QVhsU3pyVUZWZk5OK2hocEtIclEwanpBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNXZmpCWG9aZkFHN1d5NThlQ3pTcGNVS2NMK2d3UVFZTDQKa2ZVbXFZekpSaTFtYjkwVVM0amJvSGJyOEphbmRMQjRRRVRkRzhzd3UrNGNka1UwV1A2RzIyNmVGdlNpbWJ6Zgpwd3A3Ni9pUCtYOU5ydWhTb2ZRUzNOcUxBWXBia3hsYzRDSkdFUk5FV3d1cXMrY2Fjb2F4b2FEd25UOGpuNlVICmdqVDVKMGV2M0QrR1ZMZW95aTUzRForUGNEbDFZUVJtTzdTdkxPOHJueUoydmFoTE9tZTJnc0tZVGFGRzdQMWcKUXdYMDY5TlpBOUZEekNiakpFZ2VFWlBiemFXZEFsL1ZvK0dpenY4NGVOQ2ZqSzk3WU41Q1lXQjlmeENsVFJXLwpDcEJVQVVXUDB1cW1pOElVMU5teTR6TE5kVWgxUzRMS29KUmhMT3V2LzFpVS9ERmdpSmtqCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods", "services"]
  sideEffects: None
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-config
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
data:
  linkerd-crds-chart-version: linkerd-crds-1.0.0-edge
  values: |
    cliVersion: linkerd/cli edge-22.6.2
    clusterDomain: cluster.local
    clusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
    cniEnabled: false
    controlPlaneTracing: false
    controlPlaneTracingNamespace: linkerd-jaeger
    controllerImage: cr.l5d.io/linkerd/controller
    controllerLogFormat: plain
    controllerLogLevel: info
    controllerReplicas: 1
    controllerUID: 2103
    debugContainer:
      image:
        name: cr.l5d.io/linkerd/debug
        pullPolicy: ""
        version: edge-22.6.2
    deploymentStrategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
    destinationProxyResources: null
    destinationResources: null
    disableHeartBeat: true
    enableEndpointSlices: true
    enableH2Upgrade: true
    enablePodAntiAffinity: false
    enablePodDisruptionBudget: false
    heartbeatResources: null
    heartbeatSchedule: ""
    highAvailability: false
    identity:
      issuer:
        clockSkewAllowance: 20s
        externalCA: false
        issuanceLifetime: 24h0m0s
        scheme: linkerd.io/tls
        tls:
          crtPEM: |
            -----BEGIN CERTIFICATE-----
            MIIBhzCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
            eS5saW5rZXJkLjAeFw0yMjA3MDQwODIyNDhaFw0yMzA3MDQwODIzMDhaMBwxGjAY
            BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
            QgAELZ0XK2Epl65Hmxb+AvVPGNQ8zMQHpLYF4BgDPsx+sOUwq0B0EIK59bcEfyUO
            wU3BkB7WfyoZvSSnZWBpeYEATaNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
            MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
            BBQcoBy0YZJvkZutkm7u+wO+Zr7QKjAKBggqhkjOPQQDAgNHADBEAiA0mYRoflYk
            2w6UyYqhgLkW+vsh8Mf0TuWO8qkgCYI8rQIgOuzaJhWxqjc64xDmVZuW2JzLbePZ
            nOsivgVO73qj9AE=
            -----END CERTIFICATE-----
      serviceAccountTokenProjection: true
    identityProxyResources: null
    identityResources: null
    identityTrustAnchorsPEM: |
      -----BEGIN CERTIFICATE-----
      MIIBhzCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
      eS5saW5rZXJkLjAeFw0yMjA3MDQwODIyNDhaFw0yMzA3MDQwODIzMDhaMBwxGjAY
      BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
      QgAELZ0XK2Epl65Hmxb+AvVPGNQ8zMQHpLYF4BgDPsx+sOUwq0B0EIK59bcEfyUO
      wU3BkB7WfyoZvSSnZWBpeYEATaNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
      MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
      BBQcoBy0YZJvkZutkm7u+wO+Zr7QKjAKBggqhkjOPQQDAgNHADBEAiA0mYRoflYk
      2w6UyYqhgLkW+vsh8Mf0TuWO8qkgCYI8rQIgOuzaJhWxqjc64xDmVZuW2JzLbePZ
      nOsivgVO73qj9AE=
      -----END CERTIFICATE-----
    identityTrustDomain: cluster.local
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    linkerdVersion: edge-22.6.2
    nodeAffinity: null
    nodeSelector:
      kubernetes.io/os: linux
    podAnnotations: {}
    podLabels: {}
    policyController:
      defaultAllowPolicy: all-unauthenticated
      image:
        name: cr.l5d.io/linkerd/policy-controller
        pullPolicy: ""
        version: ""
      logLevel: linkerd=info,warn
      resources:
        cpu:
          limit: ""
          request: ""
        ephemeral-storage:
          limit: ""
          request: ""
        memory:
          limit: ""
          request: ""
    policyValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      injectCaFrom: ""
      injectCaFromSecret: ""
      keyPEM: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    priorityClassName: ""
    profileValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      injectCaFrom: ""
      injectCaFromSecret: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    prometheusUrl: ""
    proxy:
      accessLog: ""
      await: true
      capabilities: null
      defaultInboundPolicy: ""
      enableExternalProfiles: false
      image:
        name: cr.l5d.io/linkerd/proxy
        pullPolicy: ""
        version: edge-22.6.2
      inboundConnectTimeout: 100ms
      isGateway: false
      isIngress: false
      logFormat: plain
      logLevel: warn,linkerd=info
      opaquePorts: 25,587,3306,4444,5432,6379,9300,11211
      outboundConnectTimeout: 1000ms
      podInboundPorts: ""
      ports:
        admin: 4191
        control: 4190
        inbound: 4143
        outbound: 4140
      requireIdentityOnInboundPorts: ""
      resources:
        cpu:
          limit: ""
          request: ""
        ephemeral-storage:
          limit: ""
          request: ""
        memory:
          limit: ""
          request: ""
      saMountPath: null
      uid: 2102
      waitBeforeExitSeconds: 0
    proxyContainerName: linkerd-proxy
    proxyInit:
      capabilities: null
      closeWaitTimeoutSecs: 0
      ignoreInboundPorts: 4567,4568
      ignoreOutboundPorts: 4567,4568
      image:
        name: cr.l5d.io/linkerd/proxy-init
        pullPolicy: ""
        version: v1.5.3
      logFormat: ""
      logLevel: ""
      resources:
        cpu:
          limit: 100m
          request: 100m
        ephemeral-storage:
          limit: ""
          request: ""
        memory:
          limit: 20Mi
          request: 20Mi
      runAsRoot: false
      saMountPath: null
      skipSubnets: ""
      xtMountPath:
        mountPath: /run
        name: linkerd-proxy-init-xtables-lock
        readOnly: false
    proxyInjector:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      injectCaFrom: ""
      injectCaFromSecret: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values:
          - kube-system
          - cert-manager
    proxyInjectorProxyResources: null
    proxyInjectorResources: null
    tolerations: null
    webhookFailurePolicy: Ignore
---
###
### Identity Controller Service
###
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-identity-issuer
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
data:
  crt.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJoekNDQVM2Z0F3SUJBZ0lCQVRBS0JnZ3Foa2pPUFFRREFqQWNNUm93R0FZRFZRUURFeEZwWkdWdWRHbDAKZVM1c2FXNXJaWEprTGpBZUZ3MHlNakEzTURRd09ESXlORGhhRncweU16QTNNRFF3T0RJek1EaGFNQnd4R2pBWQpCZ05WQkFNVEVXbGtaVzUwYVhSNUxteHBibXRsY21RdU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEClFnQUVMWjBYSzJFcGw2NUhteGIrQXZWUEdOUTh6TVFIcExZRjRCZ0RQc3grc09Vd3EwQjBFSUs1OWJjRWZ5VU8Kd1UzQmtCN1dmeW9adlNTblpXQnBlWUVBVGFOaE1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CMEdBMVVkSlFRVwpNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXCkJCUWNvQnkwWVpKdmtadXRrbTd1K3dPK1pyN1FLakFLQmdncWhrak9QUVFEQWdOSEFEQkVBaUEwbVlSb2ZsWWsKMnc2VXlZcWhnTGtXK3ZzaDhNZjBUdVdPOHFrZ0NZSThyUUlnT3V6YUpoV3hxamM2NHhEbVZadVcySnpMYmVQWgpuT3NpdmdWTzczcWo5QUU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  key.pem: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUd6VVpNYUVoWlhIVy9uUThQUCtIM2hzWXRQeDJldDNLYWR5R2lrZlo4RCtvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFTFowWEsyRXBsNjVIbXhiK0F2VlBHTlE4ek1RSHBMWUY0QmdEUHN4K3NPVXdxMEIwRUlLNQo5YmNFZnlVT3dVM0JrQjdXZnlvWnZTU25aV0JwZVlFQVRRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQ==
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-identity-trust-roots
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
data:
  ca-bundle.crt: |
    -----BEGIN CERTIFICATE-----
    MIIBhzCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
    eS5saW5rZXJkLjAeFw0yMjA3MDQwODIyNDhaFw0yMzA3MDQwODIzMDhaMBwxGjAY
    BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
    QgAELZ0XK2Epl65Hmxb+AvVPGNQ8zMQHpLYF4BgDPsx+sOUwq0B0EIK59bcEfyUO
    wU3BkB7WfyoZvSSnZWBpeYEATaNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
    MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
    BBQcoBy0YZJvkZutkm7u+wO+Zr7QKjAKBggqhkjOPQQDAgNHADBEAiA0mYRoflYk
    2w6UyYqhgLkW+vsh8Mf0TuWO8qkgCYI8rQIgOuzaJhWxqjc64xDmVZuW2JzLbePZ
    nOsivgVO73qj9AE=
    -----END CERTIFICATE-----
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: identity
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: identity
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
  labels:
    app.kubernetes.io/name: identity
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.6.2
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-identity
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: identity
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-identity
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-22.6.2
        linkerd.io/proxy-version: edge-22.6.2
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: identity
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-identity
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - identity
        - -log-level=info
        - -log-format=plain
        - -controller-namespace=linkerd
        - -identity-trust-domain=cluster.local
        - -identity-issuance-lifetime=24h0m0s
        - -identity-clock-skew-allowance=20s
        - -identity-scheme=linkerd.io/tls
        - -enable-pprof=false
        env:
        - name: LINKERD_DISABLED
          value: "linkerd-await cannot block the identity controller"
        image: cr.l5d.io/linkerd/controller:edge-22.6.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9990
          initialDelaySeconds: 10
        name: identity
        ports:
        - containerPort: 8080
          name: grpc
        - containerPort: 9990
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9990
        securityContext:
          runAsUser: 2103
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/issuer
          name: identity-issuer
        - mountPath: /var/run/linkerd/identity/trust-roots/
          name: trust-roots
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS
          value: "8080"
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: linkerd-policy.linkerd.svc.cluster.local.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8080,9990"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/tokens/linkerd-identity-token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: localhost.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:edge-22.6.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
        - mountPath: /var/run/secrets/tokens
          name: linkerd-identity-token
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "443"
        image: cr.l5d.io/linkerd/proxy-init:v1.5.3
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "20Mi"
          requests:
            cpu: "100m"
            memory: "20Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          runAsNonRoot: true
          readOnlyRootFilesystem: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-identity
      volumes:
      - name: identity-issuer
        secret:
          secretName: linkerd-identity-issuer
      - configMap:
          name: linkerd-identity-trust-roots
        name: trust-roots
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - name: linkerd-identity-token
        projected:
          sources:
          - serviceAccountToken:
              path: linkerd-identity-token
              expirationSeconds: 86400
              audience: identity.l5d.io
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Destination Controller Service
###
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-sp-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: sp-validator
    port: 443
    targetPort: sp-validator
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8090
    targetPort: 8090
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: policy-https
    port: 443
    targetPort: policy-https
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
  labels:
    app.kubernetes.io/name: destination
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.6.2
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-destination
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: destination
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-destination
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-22.6.2
        linkerd.io/proxy-version: edge-22.6.2
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: destination
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-destination
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: localhost.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: localhost.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8086,8090,8443,9443,9990,9996,9997"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/tokens/linkerd-identity-token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:edge-22.6.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        lifecycle:
          postStart:
            exec:
              command:
                - /usr/lib/linkerd/linkerd-await
                - --timeout=2m
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
        - mountPath: /var/run/secrets/tokens
          name: linkerd-identity-token
      - args:
        - destination
        - -addr=:8086
        - -controller-namespace=linkerd
        - -enable-h2-upgrade=true
        - -log-level=info
        - -log-format=plain
        - -enable-endpoint-slices=true
        - -cluster-domain=cluster.local
        - -identity-trust-domain=cluster.local
        - -default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/controller:edge-22.6.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9996
          initialDelaySeconds: 10
        name: destination
        ports:
        - containerPort: 8086
          name: grpc
        - containerPort: 9996
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9996
        securityContext:
          runAsUser: 2103
          allowPrivilegeEscalation: false
      - args:
        - sp-validator
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/controller:edge-22.6.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9997
          initialDelaySeconds: 10
        name: sp-validator
        ports:
        - containerPort: 8443
          name: sp-validator
        - containerPort: 9997
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9997
        securityContext:
          runAsUser: 2103
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: sp-tls
          readOnly: true
      - args:
        - --admin-addr=0.0.0.0:9990
        - --control-plane-namespace=linkerd
        - --grpc-addr=0.0.0.0:8090
        - --server-addr=0.0.0.0:9443
        - --server-tls-key=/var/run/linkerd/tls/tls.key
        - --server-tls-certs=/var/run/linkerd/tls/tls.crt
        - --cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
        - --identity-domain=cluster.local
        - --default-policy=all-unauthenticated
        - --log-level=linkerd=info,warn
        - --log-format=plain
        image: cr.l5d.io/linkerd/policy-controller:edge-22.6.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: admin
        name: policy
        ports:
        - containerPort: 8090
          name: grpc
        - containerPort: 9990
          name: admin
        - containerPort: 9443
          name: policy-https
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: admin
          initialDelaySeconds: 10
        resources:
        securityContext:
          runAsUser: 2103
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: policy-tls
          readOnly: true
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "443"
        image: cr.l5d.io/linkerd/proxy-init:v1.5.3
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "20Mi"
          requests:
            cpu: "100m"
            memory: "20Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          runAsNonRoot: true
          readOnlyRootFilesystem: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-destination
      volumes:
      - name: sp-tls
        secret:
          secretName: linkerd-sp-validator-k8s-tls
      - name: policy-tls
        secret:
          secretName: linkerd-policy-validator-k8s-tls
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - name: linkerd-identity-token
        projected:
          sources:
          - serviceAccountToken:
              path: linkerd-identity-token
              expirationSeconds: 86400
              audience: identity.l5d.io
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity

---
###
### Proxy Injector
###
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
  labels:
    app.kubernetes.io/name: proxy-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-22.6.2
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-proxy-injector
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: proxy-injector
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli edge-22.6.2
        linkerd.io/proxy-version: edge-22.6.2
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        config.linkerd.io/opaque-ports: "8443"
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: proxy-injector
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-proxy-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: linkerd-policy.linkerd.svc.cluster.local.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8443,9995"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/tokens/linkerd-identity-token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:edge-22.6.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        lifecycle:
          postStart:
            exec:
              command:
                - /usr/lib/linkerd/linkerd-await
                - --timeout=2m
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
        - mountPath: /var/run/secrets/tokens
          name: linkerd-identity-token
      - args:
        - proxy-injector
        - -log-level=info
        - -log-format=plain
        - -linkerd-namespace=linkerd
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/controller:edge-22.6.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: proxy-injector
        ports:
        - containerPort: 8443
          name: proxy-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          runAsUser: 2103
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
        - mountPath: /var/run/linkerd/identity/trust-roots
          name: trust-roots
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568"
        - --outbound-ports-to-ignore
        - "4567,4568"
        image: cr.l5d.io/linkerd/proxy-init:v1.5.3
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "20Mi"
          requests:
            cpu: "100m"
            memory: "20Mi"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          runAsNonRoot: true
          readOnlyRootFilesystem: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-proxy-injector
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - configMap:
          name: linkerd-identity-trust-roots
        name: trust-roots
      - name: tls
        secret:
          secretName: linkerd-proxy-injector-k8s-tls
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - name: linkerd-identity-token
        projected:
          sources:
          - serviceAccountToken:
              path: linkerd-identity-token
              expirationSeconds: 86400
              audience: identity.l5d.io
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli edge-22.6.2
    config.linkerd.io/opaque-ports: "443"
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: proxy-injector
  ports:
  - name: proxy-injector
    port: 443
    targetPort: proxy-injector
---
apiVersion: v1
data:
  linkerd-config-overrides: ZGlzYWJsZUhlYXJ0QmVhdDogdHJ1ZQppZGVudGl0eToKICBpc3N1ZXI6CiAgICB0bHM6CiAgICAgIGNydFBFTTogfAogICAgICAgIC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQogICAgICAgIE1JSUJoekNDQVM2Z0F3SUJBZ0lCQVRBS0JnZ3Foa2pPUFFRREFqQWNNUm93R0FZRFZRUURFeEZwWkdWdWRHbDAKICAgICAgICBlUzVzYVc1clpYSmtMakFlRncweU1qQTNNRFF3T0RJeU5EaGFGdzB5TXpBM01EUXdPREl6TURoYU1Cd3hHakFZCiAgICAgICAgQmdOVkJBTVRFV2xrWlc1MGFYUjVMbXhwYm10bGNtUXVNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRAogICAgICAgIFFnQUVMWjBYSzJFcGw2NUhteGIrQXZWUEdOUTh6TVFIcExZRjRCZ0RQc3grc09Vd3EwQjBFSUs1OWJjRWZ5VU8KICAgICAgICB3VTNCa0I3V2Z5b1p2U1NuWldCcGVZRUFUYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0VHTUIwR0ExVWRKUVFXCiAgICAgICAgTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRVwogICAgICAgIEJCUWNvQnkwWVpKdmtadXRrbTd1K3dPK1pyN1FLakFLQmdncWhrak9QUVFEQWdOSEFEQkVBaUEwbVlSb2ZsWWsKICAgICAgICAydzZVeVlxaGdMa1crdnNoOE1mMFR1V084cWtnQ1lJOHJRSWdPdXphSmhXeHFqYzY0eERtVlp1VzJKekxiZVBaCiAgICAgICAgbk9zaXZnVk83M3FqOUFFPQogICAgICAgIC0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KICAgICAga2V5UEVNOiB8CiAgICAgICAgLS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCiAgICAgICAgTUhjQ0FRRUVJR3pVWk1hRWhaWEhXL25ROFBQK0gzaHNZdFB4MmV0M0thZHlHaWtmWjhEK29Bb0dDQ3FHU000OQogICAgICAgIEF3RUhvVVFEUWdBRUxaMFhLMkVwbDY1SG14YitBdlZQR05ROHpNUUhwTFlGNEJnRFBzeCtzT1V3cTBCMEVJSzUKICAgICAgICA5YmNFZnlVT3dVM0JrQjdXZnlvWnZTU25aV0JwZVlFQVRRPT0KICAgICAgICAtLS0tLUVORCBFQyBQUklWQVRFIEtFWS0tLS0tCmlkZW50aXR5VHJ1c3RBbmNob3JzUEVNOiB8CiAgLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCiAgTUlJQmh6Q0NBUzZnQXdJQkFnSUJBVEFLQmdncWhrak9QUVFEQWpBY01Sb3dHQVlEVlFRREV4RnBaR1Z1ZEdsMAogIGVTNXNhVzVyWlhKa0xqQWVGdzB5TWpBM01EUXdPREl5TkRoYUZ3MHlNekEzTURRd09ESXpNRGhhTUJ3eEdqQVkKICBCZ05WQkFNVEVXbGtaVzUwYVhSNUxteHBibXRsY21RdU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNECiAgUWdBRUxaMFhLMkVwbDY1SG14YitBdlZQR05ROHpNUUhwTFlGNEJnRFBzeCtzT1V3cTBCMEVJSzU5YmNFZnlVTwogIHdVM0JrQjdXZnlvWnZTU25aV0JwZVlFQVRhTmhNRjh3RGdZRFZSMFBBUUgvQkFRREFnRUdNQjBHQTFVZEpRUVcKICBNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXCiAgQkJRY29CeTBZWkp2a1p1dGttN3Urd08rWnI3UUtqQUtCZ2dxaGtqT1BRUURBZ05IQURCRUFpQTBtWVJvZmxZawogIDJ3NlV5WXFoZ0xrVyt2c2g4TWYwVHVXTzhxa2dDWUk4clFJZ091emFKaFd4cWpjNjR4RG1WWnVXMkp6TGJlUFoKICBuT3NpdmdWTzczcWo5QUU9CiAgLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-config-overrides
  namespace: linkerd
